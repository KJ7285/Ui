--[[
    Advanced UI Library v3.0
    Features:
    - Fully customizable UI elements
    - Animation system
    - Theme support
    - Advanced input handling
    - Responsive design
    - Built-in security
]]

local AdvancedUILibrary = {}
AdvancedUILibrary.__index = AdvancedUILibrary

-- Theme configuration
AdvancedUILibrary.Themes = {
    Dark = {
        Primary = Color3.fromRGB(40, 40, 40),
        Secondary = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(0, 120, 215),
        Shadow = Color3.fromRGB(20, 20, 20)
    },
    Light = {
        Primary = Color3.fromRGB(240, 240, 240),
        Secondary = Color3.fromRGB(220, 220, 220),
        Text = Color3.fromRGB(0, 0, 0),
        Accent = Color3.fromRGB(0, 90, 180),
        Shadow = Color3.fromRGB(180, 180, 180)
    }
}

-- Animation easing functions
AdvancedUILibrary.EasingStyles = {
    Linear = function(t) return t end,
    Quadratic = function(t) return t * t end,
    Elastic = function(t) return math.sin(13 * math.pi/2 * t) * math.pow(2, 10 * (t - 1)) end
}

-- Create a new UI instance
function AdvancedUILibrary.new(themeName, parent)
    local self = setmetatable({}, AdvancedUILibrary)
    
    self.Theme = AdvancedUILibrary.Themes[themeName] or AdvancedUILibrary.Themes.Dark
    self.Parent = parent or game:GetService("CoreGui")
    self.Elements = {}
    self.ActiveAnimations = {}
    
    -- Create main screen GUI
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "AdvancedUILibrary_" .. tostring(math.random(10000, 99999))
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    self.ScreenGui.DisplayOrder = 999
    self.ScreenGui.Parent = self.Parent
    
    -- Input handling
    self.InputBegan = Instance.new("BindableEvent")
    self.InputEnded = Instance.new("BindableEvent")
    
    -- Security measures
    self.LastInputTime = tick()
    self.InputRateLimit = 0.1 -- seconds
    
    return self
end

-- Base element template
function AdvancedUILibrary:CreateElement(elementType, properties)
    local element = Instance.new(elementType)
    
    -- Apply default properties based on theme
    if element:IsA("TextButton") or element:IsA("TextLabel") or element:IsA("TextBox") then
        element.TextColor3 = self.Theme.Text
        element.BackgroundColor3 = self.Theme.Primary
        element.Font = Enum.Font.SourceSansSemibold
    end
    
    if element:IsA("Frame") or element:IsA("ScrollingFrame") then
        element.BackgroundColor3 = self.Theme.Secondary
    end
    
    -- Apply custom properties
    for prop, value in pairs(properties) do
        if element[prop] ~= nil then
            element[prop] = value
        end
    end
    
    -- Add to elements table
    table.insert(self.Elements, element)
    
    return element
end

-- Advanced Button with animations
function AdvancedUILibrary:CreateButton(properties)
    local button = self:CreateElement("TextButton", {
        Size = UDim2.new(0, 200, 0, 50),
        Text = "Button",
        TextSize = 14,
        AutoButtonColor = false,
        ClipsDescendants = true,
        Parent = properties.Parent or self.ScreenGui
    })
    
    -- Apply custom properties
    for prop, value in pairs(properties) do
        if button[prop] ~= nil then
            button[prop] = value
        end
    end
    
    -- UI Stroke
    local stroke = Instance.new("UIStroke")
    stroke.Color = self.Theme.Shadow
    stroke.Thickness = 1
    stroke.Parent = button
    
    -- Hover effect
    local hoverFrame = Instance.new("Frame")
    hoverFrame.Size = UDim2.new(1, 0, 1, 0)
    hoverFrame.BackgroundColor3 = Color3.new(1, 1, 1)
    hoverFrame.BackgroundTransparency = 0.9
    hoverFrame.Parent = button
    
    -- Click effect
    local clickEffect = Instance.new("Frame")
    clickEffect.Size = UDim2.new(0, 0, 0, 0)
    clickEffect.Position = UDim2.new(0.5, 0, 0.5, 0)
    clickEffect.AnchorPoint = Vector2.new(0.5, 0.5)
    clickEffect.BackgroundColor3 = Color3.new(1, 1, 1)
    clickEffect.BackgroundTransparency = 0.8
    clickEffect.Parent = button
    
    -- Button animations
    button.MouseEnter:Connect(function()
        self:Animate(hoverFrame, {BackgroundTransparency = 0.8}, 0.2, "Quadratic")
    end)
    
    button.MouseLeave:Connect(function()
        self:Animate(hoverFrame, {BackgroundTransparency = 0.9}, 0.2, "Quadratic")
    end)
    
    button.MouseButton1Down:Connect(function(x, y)
        self:Animate(button, {Size = UDim2.new(0, 190, 0, 48)}, 0.1, "Quadratic")
        clickEffect.Size = UDim2.new(0, 0, 0, 0)
        clickEffect.Position = UDim2.new(x/button.AbsoluteSize.X, 0, y/button.AbsoluteSize.Y, 0)
        self:Animate(clickEffect, {
            Size = UDim2.new(2, 0, 2, 0),
            Position = UDim2.new(-0.5, 0, -0.5, 0),
            BackgroundTransparency = 1
        }, 0.5, "Quadratic")
    end)
    
    button.MouseButton1Up:Connect(function()
        self:Animate(button, {Size = UDim2.new(0, 200, 0, 50)}, 0.1, "Quadratic")
    end)
    
    return button
end

-- Advanced Toggle Switch
function AdvancedUILibrary:CreateToggle(properties)
    local toggleFrame = self:CreateElement("Frame", {
        Size = UDim2.new(0, 50, 0, 25),
        BackgroundColor3 = self.Theme.Secondary,
        Parent = properties.Parent or self.ScreenGui
    })
    
    local toggleButton = self:CreateElement("TextButton", {
        Size = UDim2.new(0, 25, 0, 25),
        BackgroundColor3 = self.Theme.Accent,
        Text = "",
        Parent = toggleFrame
    })
    
    local state = properties.Default or false
    
    -- Update toggle position based on state
    local function updateToggle()
        if state then
            self:Animate(toggleButton, {Position = UDim2.new(1, -25, 0, 0)}, 0.2, "Quadratic")
            toggleFrame.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        else
            self:Animate(toggleButton, {Position = UDim2.new(0, 0, 0, 0)}, 0.2, "Quadratic")
            toggleFrame.BackgroundColor3 = self.Theme.Secondary
        end
    end
    
    toggleButton.MouseButton1Click:Connect(function()
        state = not state
        updateToggle()
        if properties.Callback then
            properties.Callback(state)
        end
    end)
    
    updateToggle()
    
    return toggleFrame
end

-- Advanced Slider
function AdvancedUILibrary:CreateSlider(properties)
    local sliderFrame = self:CreateElement("Frame", {
        Size = UDim2.new(0, 200, 0, 25),
        BackgroundColor3 = self.Theme.Secondary,
        Parent = properties.Parent or self.ScreenGui
    })
    
    local fill = self:CreateElement("Frame", {
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = self.Theme.Accent,
        Parent = sliderFrame
    })
    
    local handle = self:CreateElement("TextButton", {
        Size = UDim2.new(0, 15, 1, 0),
        BackgroundColor3 = Color3.new(1, 1, 1),
        Text = "",
        Parent = sliderFrame
    })
    
    local min = properties.Min or 0
    local max = properties.Max or 100
    local value = properties.Default or min
    
    local function updateSlider(val)
        value = math.clamp(val, min, max)
        local ratio = (value - min) / (max - min)
        fill.Size = UDim2.new(ratio, 0, 1, 0)
        handle.Position = UDim2.new(ratio, -7, 0, 0)
        
        if properties.Callback then
            properties.Callback(value)
        end
    end
    
    local function getValueFromX(x)
        local relativeX = x - sliderFrame.AbsolutePosition.X
        local ratio = math.clamp(relativeX / sliderFrame.AbsoluteSize.X, 0, 1)
        return min + (max - min) * ratio
    end
    
    handle.MouseButton1Down:Connect(function()
        local connection
        local startPos = game:GetService("UserInputService"):GetMouseLocation().X
        local startValue = value
        
        connection = game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                local currentPos = input.Position.X
                local delta = currentPos - startPos
                local newValue = startValue + (delta / sliderFrame.AbsoluteSize.X) * (max - min)
                updateSlider(newValue)
            end
        end)
        
        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
            end
        end)
    end)
    
    sliderFrame.MouseButton1Down:Connect(function(x, y)
        local absoluteX = x + sliderFrame.AbsolutePosition.X
        updateSlider(getValueFromX(absoluteX))
    end)
    
    updateSlider(value)
    
    return sliderFrame
end

-- Advanced Text Input
function AdvancedUILibrary:CreateTextInput(properties)
    local inputFrame = self:CreateElement("Frame", {
        Size = UDim2.new(0, 200, 0, 40),
        BackgroundColor3 = self.Theme.Primary,
        Parent = properties.Parent or self.ScreenGui
    })
    
    local textBox = self:CreateElement("TextBox", {
        Size = UDim2.new(1, -10, 1, -10),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        Text = properties.Placeholder or "",
        TextColor3 = self.Theme.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        ClearTextOnFocus = properties.ClearTextOnFocus or false,
        Parent = inputFrame
    })
    
    local placeholderText = properties.Placeholder or ""
    local placeholderColor = Color3.fromRGB(180, 180, 180)
    
    if properties.Placeholder then
        textBox.FocusLost:Connect(function()
            if textBox.Text == "" then
                textBox.Text = placeholderText
                textBox.TextColor3 = placeholderColor
            end
        end)
        
        textBox.Focused:Connect(function()
            if textBox.Text == placeholderText then
                textBox.Text = ""
                textBox.TextColor3 = self.Theme.Text
            end
        end)
    end
    
    textBox.FocusLost:Connect(function(enterPressed)
        if properties.Callback then
            properties.Callback(textBox.Text, enterPressed)
        end
    end)
    
    return inputFrame
end

-- Animation system
function AdvancedUILibrary:Animate(instance, properties, duration, easingStyle)
    local startTime = tick()
    local startValues = {}
    
    for prop, _ in pairs(properties) do
        startValues[prop] = instance[prop]
    end
    
    local animationId = #self.ActiveAnimations + 1
    self.ActiveAnimations[animationId] = true
    
    local easingFunc = AdvancedUILibrary.EasingStyles[easingStyle] or AdvancedUILibrary.EasingStyles.Linear
    
    coroutine.wrap(function()
        while tick() - startTime < duration and self.ActiveAnimations[animationId] do
            local alpha = easingFunc((tick() - startTime) / duration)
            
            for prop, targetValue in pairs(properties) do
                if typeof(targetValue) == "number" then
                    instance[prop] = startValues[prop] + (targetValue - startValues[prop]) * alpha
                elseif typeof(targetValue) == "Color3" then
                    instance[prop] = startValues[prop]:Lerp(targetValue, alpha)
                elseif targetValue.ClassName == "UDim2" then
                    instance[prop] = UDim2.new(
                        startValues[prop].X.Scale + (targetValue.X.Scale - startValues[prop].X.Scale) * alpha,
                        startValues[prop].X.Offset + (targetValue.X.Offset - startValues[prop].X.Offset) * alpha,
                        startValues[prop].Y.Scale + (targetValue.Y.Scale - startValues[prop].Y.Scale) * alpha,
                        startValues[prop].Y.Offset + (targetValue.Y.Offset - startValues[prop].Y.Offset) * alpha
                    )
                end
            end
            
            game:GetService("RunService").Heartbeat:Wait()
        end
        
        -- Ensure final values are set
        if self.ActiveAnimations[animationId] then
            for prop, targetValue in pairs(properties) do
                instance[prop] = targetValue
            end
        end
        
        self.ActiveAnimations[animationId] = nil
    end)()
    
    return animationId
end

-- Stop animation
function AdvancedUILibrary:StopAnimation(animationId)
    self.ActiveAnimations[animationId] = false
end

-- Create a window container
function AdvancedUILibrary:CreateWindow(properties)
    local window = self:CreateElement("Frame", {
        Size = UDim2.new(0, 400, 0, 500),
        BackgroundColor3 = self.Theme.Primary,
        Parent = properties.Parent or self.ScreenGui
    })
    
    local titleBar = self:CreateElement("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = self.Theme.Accent,
        Parent = window
    })
    
    local titleLabel = self:CreateElement("TextLabel", {
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = properties.Title or "Window",
        TextColor3 = self.Theme.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar
    })
    
    local closeButton = self:CreateElement("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundColor3 = Color3.fromRGB(255, 80, 80),
        Text = "X",
        TextColor3 = Color3.new(1, 1, 1),
        Parent = titleBar
    })
    
    local contentFrame = self:CreateElement("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundTransparency = 1,
        ScrollBarThickness = 5,
        Parent = window
    })
    
    local uiListLayout = Instance.new("UIListLayout")
    uiListLayout.Padding = UDim.new(0, 5)
    uiListLayout.Parent = contentFrame
    
    -- Make window draggable
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = window.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        self:Animate(window, {Size = UDim2.new(0, 400, 0, 0)}, 0.2, "Quadratic")
        task.wait(0.2)
        window:Destroy()
    end)
    
    -- Update content frame size when elements are added
    uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y)
    end)
    
    return {
        Frame = window,
        Content = contentFrame,
        TitleBar = titleBar,
        CloseButton = closeButton
    }
end

-- Notification system
function AdvancedUILibrary:Notify(title, message, duration)
    duration = duration or 5
    
    local notification = self:CreateElement("Frame", {
        Size = UDim2.new(0, 300, 0, 80),
        Position = UDim2.new(1, 10, 1, -90),
        AnchorPoint = Vector2.new(1, 1),
        BackgroundColor3 = self.Theme.Primary,
        Parent = self.ScreenGui
    })
    
    local titleLabel = self:CreateElement("TextLabel", {
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = self.Theme.Accent,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.SourceSansBold,
        Parent = notification
    })
    
    local messageLabel = self:CreateElement("TextLabel", {
        Size = UDim2.new(1, -10, 1, -30),
        Position = UDim2.new(0, 5, 0, 25),
        BackgroundTransparency = 1,
        Text = message,
        TextColor3 = self.Theme.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        TextWrapped = true,
        Parent = notification
    })
    
    local closeButton = self:CreateElement("TextButton", {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -25, 0, 5),
        BackgroundColor3 = Color3.fromRGB(255, 80, 80),
        Text = "X",
        TextColor3 = Color3.new(1, 1, 1),
        Parent = notification
    })
    
    local progressBar = self:CreateElement("Frame", {
        Size = UDim2.new(1, 0, 0, 3),
        Position = UDim2.new(0, 0, 1, -3),
        BackgroundColor3 = self.Theme.Accent,
        Parent = notification
    })
    
    -- Animation
    notification.Position = UDim2.new(1, 310, 1, -90)
    self:Animate(notification, {Position = UDim2.new(1, 10, 1, -90)}, 0.3, "Quadratic")
    
    self:Animate(progressBar, {Size = UDim2.new(0, 0, 0, 3)}, duration, "Linear")
    
    local function close()
        self:Animate(notification, {Position = UDim2.new(1, 310, 1, -90)}, 0.3, "Quadratic")
        task.wait(0.3)
        notification:Destroy()
    end
    
    closeButton.MouseButton1Click:Connect(close)
    
    task.delay(duration, close)
end

-- Cleanup all UI elements
function AdvancedUILibrary:Destroy()
    for _, element in pairs(self.Elements) do
        element:Destroy()
    end
    
    self.ScreenGui:Destroy()
    self.InputBegan:Destroy()
    self.InputEnded:Destroy()
    
    for id, _ in pairs(self.ActiveAnimations) do
        self.ActiveAnimations[id] = false
    end
end

return AdvancedUILibrary
